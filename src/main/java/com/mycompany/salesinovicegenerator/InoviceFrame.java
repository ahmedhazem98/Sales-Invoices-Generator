/////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.salesinovicegenerator;

/* ............................................. imports ............................................. */

import UI.InoviceHeaderDialog;
import UI.InoviceLineDialog;
import com.mycompany.salesinovicegenerator.model.InoviceHeader;
import com.mycompany.salesinovicegenerator.model.InoviceHeaderTableModel;
import com.mycompany.salesinovicegenerator.model.InoviceLine;
import com.mycompany.salesinovicegenerator.model.InoviceLineTableModel;
import java.awt.HeadlessException;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
/**
 *
 * @author AhmedHazem
 */
    
/*..........................................................................................................*/
/*..........................................................................................................*/
/* ............................................. Class InoviceFrame ....................................... */
    
public class InoviceFrame extends javax.swing.JFrame implements ActionListener, ListSelectionListener {

    /**
     * Creates new form InoviceFrame
     */
    public InoviceFrame() {
        initComponents();
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        invoicesTable = new javax.swing.JTable();
        invoicesTable.getSelectionModel().addListSelectionListener(this);
        createInvbtn = new javax.swing.JButton();
        createInvbtn.addActionListener(this);
        delInvbtn = new javax.swing.JButton();
        delInvbtn.addActionListener(this);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        invNumLbl = new javax.swing.JLabel();
        invTotalLbl = new javax.swing.JLabel();
        InvDateTF = new javax.swing.JTextField();
        CustNameTF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        invLinesTable = new javax.swing.JTable();
        createInvLineBtn = new javax.swing.JButton();
        createInvLineBtn.addActionListener(this);
        deleteInvLineBtn = new javax.swing.JButton();
        deleteInvLineBtn.addActionListener(this);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        loadMenuItem.addActionListener(this);
        saveMenuItem = new javax.swing.JMenuItem();
        saveMenuItem.addActionListener(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        invoicesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(invoicesTable);

        createInvbtn.setText("Create New Inovice");
        createInvbtn.setActionCommand("CreateNewInovice");

        delInvbtn.setText("Delete Inovice");
        delInvbtn.setActionCommand("DeleteInovice");

        jLabel1.setText("Inovice Number");

        jLabel2.setText("Inovice Date");

        jLabel3.setText("Customer Name");

        jLabel4.setText("Inovice Total");

        invLinesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(invLinesTable);

        createInvLineBtn.setText("Create Inv Line");
        createInvLineBtn.setActionCommand("CreateNewLine");

        deleteInvLineBtn.setText("Delete Inv Line");
        deleteInvLineBtn.setActionCommand("DeleteLine");

        jMenu1.setText("File");

        loadMenuItem.setText("Load File");
        loadMenuItem.setToolTipText("");
        loadMenuItem.setActionCommand("LoadFile");
        jMenu1.add(loadMenuItem);

        saveMenuItem.setText("Save File");
        saveMenuItem.setActionCommand("SaveFile");
        jMenu1.add(saveMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(createInvbtn)
                .addGap(82, 82, 82)
                .addComponent(delInvbtn)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InvDateTF)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(invTotalLbl)
                                            .addComponent(invNumLbl))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(CustNameTF)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 19, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(createInvLineBtn)
                        .addGap(107, 107, 107)
                        .addComponent(deleteInvLineBtn)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(invNumLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(InvDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(CustNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(invTotalLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createInvLineBtn)
                            .addComponent(deleteInvLineBtn))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createInvbtn)
                    .addComponent(delInvbtn))
                .addContainerGap(99, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InoviceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InoviceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InoviceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InoviceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InoviceFrame().setVisible(true);
            }
        });
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CustNameTF;
    private javax.swing.JTextField InvDateTF;
    private javax.swing.JButton createInvLineBtn;
    private javax.swing.JButton createInvbtn;
    private javax.swing.JButton delInvbtn;
    private javax.swing.JButton deleteInvLineBtn;
    private javax.swing.JTable invLinesTable;
    private javax.swing.JLabel invNumLbl;
    private javax.swing.JLabel invTotalLbl;
    private javax.swing.JTable invoicesTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
    private DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
    private List<InoviceHeader> inovicesList = new ArrayList<>();
    private InoviceHeaderTableModel inoviceHeaderTableModel;
    private InoviceLineTableModel inoviceLineTableModel;
    private InoviceHeaderDialog headerDialog;
    private InoviceLineDialog lineDialog;
     
/////////////////////////////////////////////////////////////////////////////////////////////////////////
       
    @Override
    public void actionPerformed(ActionEvent e) {
        
        switch(e.getActionCommand()){
        
           case "LoadFile" ->             {
                try {
                    loadFile();
                } catch (FileNotFoundException ex) {
                } catch (IOException ex) {
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); }
            }
           case "SaveFile" -> {saveFile(); break;}
           case "CreateNewInovice" -> {displayNewInoviceDialog(); break;}
           case "DeleteInovice" -> { deleteInovice(); break;}
           case "CreateNewLine" -> {displayNewLineDialog();}
           case "DeleteLine" -> { deleteLine(); break;}   
           case "CreateInvOk" -> {createInvOk(); break;}
           case "CreateInvCancel" -> {createInvCancel(); break;}
           case "CreateLineOK" -> {createLineOk(); break;}
           case "CreateLineCancel" -> {createLineCancel(); break;}
        }
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
        
    private void loadFile() throws FileNotFoundException, IOException, ParseException{
            
            JOptionPane.showMessageDialog(this,"Select header File","Select File",JOptionPane.WARNING_MESSAGE);
            JFileChooser openFile = new JFileChooser();
            int result = openFile.showOpenDialog(this);
            if(result == JFileChooser.APPROVE_OPTION){
                
                File headerFile = openFile.getSelectedFile();
                FileReader headerFr = new FileReader(headerFile);
                BufferedReader headerBr = new BufferedReader(headerFr);
                String headerLine = null;
                while( (headerLine = headerBr.readLine()) != null){
                    
                    String[] headerParts = headerLine.split(",");
                    String invNumStr = headerParts[0];
                    String invDateStr = headerParts[1];
                    String custName = headerParts[2];
                    
                    int invNum = Integer.parseInt(invNumStr);
                    Date invDate = df.parse(invDateStr);
                    InoviceHeader inv = new InoviceHeader(invNum,custName,invDate);
                    inovicesList.add(inv);
                }
                
                JOptionPane.showMessageDialog(this,"Select lines File","Select File",JOptionPane.WARNING_MESSAGE);
                result = openFile.showOpenDialog(this);
                if(result == JFileChooser.APPROVE_OPTION){
                    
                    File linesFile = openFile.getSelectedFile();
                    BufferedReader linesBr = new BufferedReader(new FileReader(linesFile));
                    String linesLine = null;
                    while( (linesLine = linesBr.readLine()) != null){
                        
                        String[] lineParts = linesLine.split(",");
                        String invNumStr = lineParts[0];
                        String itemName = lineParts[1];
                        String itemPriceStr = lineParts[2];
                        String itemCountStr = lineParts[3];
                        
                        int invNum = Integer.parseInt(invNumStr);
                        double itemPrice = Double.parseDouble(itemPriceStr);
                        int itemCount = Integer.parseInt(itemCountStr);
                        InoviceHeader header = findInoviceNum(invNum);
                        InoviceLine invLine = new InoviceLine(itemName,itemPrice,itemCount,header);
                        header.getLines().add(invLine);
                        
                    }
                    inoviceHeaderTableModel = new InoviceHeaderTableModel(inovicesList);
                    invoicesTable.setModel(inoviceHeaderTableModel);
                    invoicesTable.validate();
                    
                }
                System.out.println("Check");
            }
            display();
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
      
    private void saveFile(){
        String headers = "";
        String lines = "";
        for (InoviceHeader header : inovicesList) {
            headers += header.exportHeaderData();
            headers += "\n";
            
            for (InoviceLine line : header.getLines()) {
                lines += line.exportLineData();
                lines += "\n";
            }
        }
        JOptionPane.showMessageDialog(this, "Select File to save to ", "Select File", JOptionPane.WARNING_MESSAGE);
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            
            File headerFile = fileChooser.getSelectedFile();
            try {
                FileWriter headerFileWriter = new FileWriter(headerFile);
                headerFileWriter.write(headers);
                headerFileWriter.flush();
                headerFileWriter.close();

                JOptionPane.showMessageDialog(this, "Please, select file to save lines data!", "Attension", JOptionPane.WARNING_MESSAGE);
                result = fileChooser.showSaveDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    
                    File linesFile = fileChooser.getSelectedFile();
                    FileWriter lineFileWriter = new FileWriter(linesFile);
                    lineFileWriter.write(lines);
                    lineFileWriter.flush();
                    lineFileWriter.close();
                }
            } catch (HeadlessException | IOException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }
     
/////////////////////////////////////////////////////////////////////////////////////////////////////////
       
    private InoviceHeader findInoviceNum(int invNum){
        
        InoviceHeader header = null;
        for(InoviceHeader inv : inovicesList){
            if(invNum == inv.getInvNum()){
                header = inv;
                break;
            }       
        } 
        return header;
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    @Override
    public void valueChanged(ListSelectionEvent e) {
        System.out.println("Inovice Selected");
        inovicesHeaderTableRowSelected();
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    private void inovicesHeaderTableRowSelected() {
        int selectedRowIndex = invoicesTable.getSelectedRow();
        if(selectedRowIndex >= 0){
            
            InoviceHeader row = inoviceHeaderTableModel.getInovicesList().get(selectedRowIndex);
            CustNameTF.setText(row.getCustomerName());
            InvDateTF.setText(df.format(row.getInvDate()));
            invNumLbl.setText(""+row.getInvNum());
            invTotalLbl.setText(""+row.getInvTotal());
            ArrayList<InoviceLine> lines = row.getLines();
           inoviceLineTableModel = new InoviceLineTableModel(lines);
           invLinesTable.setModel(inoviceLineTableModel);
           inoviceLineTableModel.fireTableDataChanged();
            
        }
        
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    private void displayNewInoviceDialog() {
        headerDialog = new InoviceHeaderDialog(this);
        headerDialog.setVisible(true);
        
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    private void createInvOk() {
        String custName = headerDialog.getCustNameField().getText();
        String invDateStr = headerDialog.getInvDateField().getText();
        headerDialog.setVisible(false);
        headerDialog.dispose();
        headerDialog = null;
        try {
            Date invDate = df.parse(invDateStr);
            int invNum = getNextInoviceNum();
            InoviceHeader invoiceHeader = new InoviceHeader(invNum, custName, invDate);
            inovicesList.add(invoiceHeader);
            inoviceHeaderTableModel.fireTableDataChanged();
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        display();
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
        
    private int getNextInoviceNum(){
        int max = 0;
        for(InoviceHeader header: inovicesList){
            if(header.getInvNum() > max){
                max = header.getInvNum();
            }
        }
        return max + 1;
        
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    private void createInvCancel() {
        headerDialog.setVisible(false);
        headerDialog.dispose();
        headerDialog = null;
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    public JTextField getCustNameTF() {
        return CustNameTF;
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    public JTextField getInvDateTF() {
        return InvDateTF;
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    private void displayNewLineDialog() {
        lineDialog = new InoviceLineDialog(this);
        lineDialog.setVisible(true);
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    private void createLineOk() {
        String itemName = lineDialog.getItemNameField().getText();
        String itemCountStr = lineDialog.getItemCountField().getText();
        String itemPriceStr = lineDialog.getItemPriceField().getText();
        lineDialog.setVisible(false);
        lineDialog.dispose();
        lineDialog = null;
        int itemCount = Integer.parseInt(itemCountStr);
        double itemPrice = Double.parseDouble(itemPriceStr);
        int headerIndex = invoicesTable.getSelectedRow();
        InoviceHeader invoice = inoviceHeaderTableModel.getInovicesList().get(headerIndex);
        InoviceLine invoiceLine = new InoviceLine(itemName, itemPrice, itemCount, invoice);
        invoice.addInvLine(invoiceLine);
        inoviceLineTableModel.fireTableDataChanged();
        inoviceHeaderTableModel.fireTableDataChanged();
        invTotalLbl.setText(""+ invoice.getInvTotal());
        display();
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    private void createLineCancel() {
        lineDialog.setVisible(false);
        lineDialog.dispose();
        lineDialog = null;
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    private void deleteInovice() {
        int invIndex = invoicesTable.getSelectedRow();
        InoviceHeader header = inoviceHeaderTableModel.getInovicesList().get(invIndex);
        inoviceHeaderTableModel.getInovicesList().remove(invIndex);
        inoviceHeaderTableModel.fireTableDataChanged();
        inoviceLineTableModel = new InoviceLineTableModel(new ArrayList<InoviceLine>());
        invLinesTable.setModel(inoviceLineTableModel);
        inoviceLineTableModel.fireTableDataChanged();
        CustNameTF.setText("");
        InvDateTF.setText("");
        invNumLbl.setText("");
        invTotalLbl.setText("");
        display();
        
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    private void deleteLine() {
        int lineIndex = invLinesTable.getSelectedRow();
        InoviceLine line = inoviceLineTableModel.getInovicesLines().get(lineIndex);
        inoviceLineTableModel.getInovicesLines().remove(lineIndex);
        inoviceLineTableModel.fireTableDataChanged();
        inoviceHeaderTableModel.fireTableDataChanged();
        invTotalLbl.setText("" + line.getHeader().getInvTotal());
        display();
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
        
    private void display() {
        System.out.println("***************************");
        for (InoviceHeader header : inovicesList) {
            System.out.println(header);
        }
        System.out.println("***************************");
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////
    
}
